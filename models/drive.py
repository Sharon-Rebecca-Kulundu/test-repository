# -*- coding: utf-8 -*-
"""drive5.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b0fjR7QiyXUcPc3aJaj8HAsdyIbTOOxY
"""

import socketio
import eventlet
import numpy as np
import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from flask import Flask
import base64
from io import BytesIO

# Create a Socket.IO client
sio = socketio.Server()


app = Flask(__name__) #'__main__'
speed_limit = 10

# Load the pre-trained model
model = load_model('model.h5')

# Preprocess image from the simulator
def preprocess_image(image):
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB
    image = cv2.resize(image, (128, 128))  # Resize to match model input
    image = img_to_array(image) / 255.0  # Normalize and convert to array
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    return image

@sio.on('telemetry')
def telemetry(sid, data):
    speed = float(data['speed'])
    image = Image.open(BytesIO(base64.b64decode(data['image'])))
    image = np.asarray(image)
    image = img_preprocess(image)
    image = np.array([image])
    steering_angle = float(model.predict(image))
    throttle = 1.0 - speed/speed_limit
    print('{} {} {}'.format(steering_angle, throttle, speed))
    send_control(steering_angle, throttle)



@sio.on('connect')
def connect(sid, environ):
    print('Connected')
    send_control(0, 0)

def send_control(steering_angle, throttle):
    sio.emit('steer', data = {
        'steering_angle': steering_angle.__str__(),
        'throttle': throttle.__str__()
    })


if __name__ == '__main__':
    model = load_model('model.h5')
    app = socketio.Middleware(sio, app)
    eventlet.wsgi.server(eventlet.listen(('', 4567)), app)

# Connect to the simulator
def drive():
    sio.connect('http://localhost:4567')  # Replace with correct host and port
    sio.wait()

if __name__ == '__main__':
    drive()